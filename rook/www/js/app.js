// Generated by CoffeeScript 1.4.0
(function() {
  var BarChart, data;

  BarChart = (function() {

    BarChart.dim = {
      size: {
        type: "numeric",
        optional: false
      },
      y: {
        type: "categorical",
        optional: false
      },
      color: {
        type: "categorical",
        optional: true
      }
    };

    function BarChart(width, height) {
      this.width = width != null ? width : 480;
      this.height = height != null ? height : 640;
      this.map = {
        size: null,
        y: null
      };
      this.margin = {
        top: 0,
        left: 0,
        right: 0,
        bottom: 0
      };
    }

    BarChart.prototype.isValid = function() {
      return (this.map.y != null) && (this.map.size != null);
    };

    BarChart.prototype.y = function(_) {
      this.map.y = _;
      return this;
    };

    BarChart.prototype.size = function(_) {
      this.map.size = _;
      return this;
    };

    BarChart.prototype.mapDim = function(variable, dim) {
      var type;
      type = this.dim[dim].type;
      this.map[dim] = variable;
      return this;
    };

    BarChart.prototype.plotAxis = function(el, scale) {
      return this;
    };

    BarChart.prototype.plotGrid = function(el) {
      return this;
    };

    BarChart.prototype.plot = function(el, data) {
      var $svg, bars, color, map, size, svg, y;
      $svg = $("svg", el).attr("width", this.width).attr("height", this.height);
      svg = d3.select($svg.get(0));
      map = this.map;
      size = this._size;
      y = this._y;
      color = this._color;
      bars = svg.selectAll("rect").data(data);
      console.log(y.rangeBand());
      bars.enter().append("rect").attr({
        x: function(d) {
          return Math.min(size(0), size(d[map.size]));
        },
        y: function(d) {
          return y(d[map.y]);
        },
        width: function(d) {
          return Math.abs(size(0) - size(d[map.size]));
        },
        height: y.rangeBand(),
        fill: color,
        stroke: "white",
        "class": "bar"
      });
      console.log(bars);
      bars.exit().remove();
      return this;
    };

    BarChart.prototype.rescale = function(data) {
      var map, size_ext;
      map = this.map;
      size_ext = d3.extent(data, function(d) {
        return +d[map.size];
      });
      if (size_ext[0] > 0) {
        size_ext[0] = 0;
      }
      if (size_ext[1] < 0) {
        size_ext[1] = 0;
      }
      this._size = d3.scale.linear().domain(size_ext).range([this.margin.left, this.width - this.margin.right]);
      this._y = d3.scale.ordinal().domain(data.map(function(d) {
        return d[map.y];
      })).rangeBands([this.margin.top, this.height - this.margin.bottom]);
      if (map.color != null) {
        this._color = d3.scale.category20().domain(data.map(function(d) {
          return d[map.color];
        }));
      } else {
        this._color = d3.functor("steelblue");
      }
      return this;
    };

    return BarChart;

  })();

  data = [
    {
      y: "a",
      size: 10
    }, {
      y: "b",
      size: 20
    }
  ];

  this.bc = {};

  $(function() {
    return window.bc = new BarChart().y("y").size("size").rescale(data).plot($(".graph"), data);
  });

}).call(this);
